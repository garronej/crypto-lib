(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var environnement_1=require("../sync/environnement");var web_1=require("./WorkerThread/web");var node_1=require("./WorkerThread/node");var simulated_1=require("./WorkerThread/simulated");var WorkerThread;(function(WorkerThread){function factory(source,isMultithreadingEnabled){return function(){return isMultithreadingEnabled()?environnement_1.isBrowser()?web_1.spawn(source):node_1.spawn(source):simulated_1.spawn(source)}}WorkerThread.factory=factory})(WorkerThread=exports.WorkerThread||(exports.WorkerThread={}))},{"../sync/environnement":7,"./WorkerThread/node":2,"./WorkerThread/simulated":3,"./WorkerThread/web":4}],2:[function(require,module,exports){(function(Buffer){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var ts_events_extended_1=require("ts-events-extended");var ThreadMessage_1=require("../../sync/_worker_thread/ThreadMessage");var path=require("path");function spawn(source){var child_process=require("child_process"+"");var fs=require("fs"+"");var random_file_path=function(){var getRandom=function(){var crypto=require("crypto"+"");var base_path=function(){var out=path.join("/","tmp");if(!fs.existsSync(out)){out=path.join(".")}return out}();return function(){return path.join(base_path,".you_can_remove_me_"+crypto.randomBytes(4).toString("hex")+".js")}}();var out=getRandom();while(fs.existsSync(out)){out=getRandom()}return out}();fs.writeFileSync(random_file_path,Buffer.from(['console.log("__LOADED__");',"var __process_node= process;",source].join("\n"),"utf8"));var childProcess=child_process.fork(random_file_path,[],{silent:true});childProcess.stdout.once("data",function(){return fs.unlink(random_file_path,function(){})});var evtResponse=new ts_events_extended_1.SyncEvent;childProcess.on("message",function(message){return evtResponse.post(ThreadMessage_1.transfer.restore(message))});return{evtResponse:evtResponse,send:function(action){return childProcess.send(ThreadMessage_1.transfer.prepare(action))},terminate:function(){return childProcess.kill()}}}exports.spawn=spawn}).call(this,require("buffer").Buffer)},{"../../sync/_worker_thread/ThreadMessage":6,buffer:13,path:15,"ts-events-extended":33}],3:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var ts_events_extended_1=require("ts-events-extended");function spawn(source){var evtResponse=new ts_events_extended_1.SyncEvent;var actionListener;var __simulatedMainThreadApi={sendResponse:function(response){return setTimeout(function(){return evtResponse.post(response)},0)},setActionListener:function(actionListener_){return actionListener=actionListener_}};eval(source);return{evtResponse:evtResponse,send:function(action){return actionListener(action)},terminate:function(){}}}exports.spawn=spawn},{"ts-events-extended":33}],4:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var ts_events_extended_1=require("ts-events-extended");function spawn(source){var evtResponse=new ts_events_extended_1.SyncEvent;var worker=new Worker(URL.createObjectURL(new Blob([source],{type:"text/javascript"})));worker.addEventListener("message",function(_a){var data=_a.data;return evtResponse.post(data)});return{evtResponse:evtResponse,send:function(action,transfer){worker.postMessage(action,transfer||[])},terminate:function(){return worker.terminate()}}}exports.spawn=spawn},{"ts-events-extended":33}],5:[function(require,module,exports){(function(Buffer){"use strict";var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};return __assign.apply(this,arguments)};var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value)}).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};var __generator=this&&this.__generator||function(thisArg,body){var _={label:0,sent:function(){if(t[0]&1)throw t[1];return t[1]},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),throw:verb(1),return:verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return step([n,v])}}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=1,y&&(t=op[0]&2?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break}if(t[2])_.ops.pop();_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e];y=0}finally{f=t=0}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true}}};function __export(m){for(var p in m)if(!exports.hasOwnProperty(p))exports[p]=m[p]}var _this=this;Object.defineProperty(exports,"__esModule",{value:true});var runExclusive=require("run-exclusive");var WorkerThread_1=require("./WorkerThread");var environnement_1=require("../sync/environnement");var bundle_source=function(){var path=require("path");return Buffer("","base64").toString("utf8")}();var __cryptoLib;eval(bundle_source);var _a=__cryptoLib,toBuffer=_a.toBuffer,serializer=_a.serializer,sync_scrypt=_a.scrypt,sync_aes=_a.aes,sync_rsa=_a.rsa,sync_plain=_a.plain;exports.toBuffer=toBuffer;exports.serializer=serializer;__export(require("../sync/types"));var isMultithreadingEnabled=environnement_1.isBrowser()?typeof Worker!=="undefined"&&typeof URL!=="undefined"&&typeof Blob!=="undefined":true;function disableMultithreading(){isMultithreadingEnabled=false}exports.disableMultithreading=disableMultithreading;var _b=function(){var spawn=WorkerThread_1.WorkerThread.factory(bundle_source,function(){return isMultithreadingEnabled});var record={};return[function(workerThreadId){var appWorker=record[workerThreadId];if(appWorker===undefined){appWorker=spawn();record[workerThreadId]=appWorker}return appWorker},function(workerThreadId){return Object.keys(record).filter(function(id){return workerThreadId!==undefined?id===workerThreadId:true}).map(function(id){return[record[id],id]}).filter(function(_a){var appWorker=_a[0];return appWorker!==undefined}).forEach(function(_a){var appWorker=_a[0],id=_a[1];appWorker.terminate();delete record[id]})},function(){return Object.keys(record)}]}(),getWorkerThread=_b[0],terminateWorkerThreads=_b[1],listWorkerThreadIds=_b[2];exports.terminateWorkerThreads=terminateWorkerThreads;exports.listWorkerThreadIds=listWorkerThreadIds;function preSpawnWorkerThread(workerThreadId){getWorkerThread(workerThreadId)}exports.preSpawnWorkerThread=preSpawnWorkerThread;var workerThreadPool;(function(workerThreadPool){function getWorkerThreadId(workerThreadPoolId,i){return"__pool_"+workerThreadPoolId+"_"+(i!==undefined?i:"")}function preSpawn(workerThreadPoolId,poolSize){for(var i=1;i<=poolSize;i++){preSpawnWorkerThread(getWorkerThreadId(workerThreadPoolId,i))}}workerThreadPool.preSpawn=preSpawn;function listIds(workerThreadPoolId){return listWorkerThreadIds().filter(function(workerThreadId){return workerThreadId.startsWith(getWorkerThreadId(workerThreadPoolId))})}workerThreadPool.listIds=listIds;function terminate(workerThreadPoolId){listIds(workerThreadPoolId).forEach(function(workerThreadId){return terminateWorkerThreads(workerThreadId)})}workerThreadPool.terminate=terminate})(workerThreadPool=exports.workerThreadPool||(exports.workerThreadPool={}));var getCounter=function(){var counter=0;return function(){return counter++}}();var generateId=function(name){return"__]]>>"+name+"<<[[__"};function cipherFactoryPool(params,workerThreadPoolId){var _this=this;if(workerThreadPoolId===undefined){workerThreadPoolId=generateId(params.cipherName);workerThreadPool.preSpawn(workerThreadPoolId,4)}else if(workerThreadPool.listIds(workerThreadPoolId).length===0){throw new Error("No thread in the pool")}var runExclusiveFunctions=workerThreadPool.listIds(workerThreadPoolId).map(function(workerThreadId){var cipher=cipherFactoryPool.cipherFactory(params,workerThreadId);return runExclusive.build(function(method,data){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){return[2,cipher[method](data)]})})})});return function(){var _a=["encrypt","decrypt"].map(function(method){return function(data){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){return[2,runExclusiveFunctions.map(function(runExclusiveFunction){return[runExclusive.getQueuedCallCount(runExclusiveFunction),runExclusiveFunction]}).sort(function(_a,_b){var n1=_a[0];var n2=_b[0];return n1-n2})[0][1](method,data)]})})}}),encrypt=_a[0],decrypt=_a[1];switch(params.components){case"EncryptorDecryptor":return{encrypt:encrypt,decrypt:decrypt};case"Decryptor":return{decrypt:decrypt};case"Encryptor":return{encrypt:encrypt}}}()}(function(cipherFactoryPool){function cipherFactory(params,workerThreadId){var cipherInstanceRef=getCounter();var appWorker=getWorkerThread(workerThreadId);appWorker.send(function(){var action=__assign({action:"CipherFactory",cipherInstanceRef:cipherInstanceRef},params);return action}());return function(){var _a=["encrypt","decrypt"].map(function(method){return function(data){return cipherFactory.encryptOrDecrypt(cipherInstanceRef,method,data,workerThreadId)}}),encrypt=_a[0],decrypt=_a[1];switch(params.components){case"EncryptorDecryptor":return{encrypt:encrypt,decrypt:decrypt};case"Decryptor":return{decrypt:decrypt};case"Encryptor":return{encrypt:encrypt}}}()}cipherFactoryPool.cipherFactory=cipherFactory;(function(cipherFactory){function encryptOrDecrypt(cipherInstanceRef,method,input,workerThreadId){return __awaiter(this,void 0,void 0,function(){var actionId,appWorker,output;return __generator(this,function(_a){switch(_a.label){case 0:actionId=getCounter();appWorker=getWorkerThread(workerThreadId);appWorker.send(function(){var action={action:"EncryptOrDecrypt",actionId:actionId,cipherInstanceRef:cipherInstanceRef,method:method,input:input};return action}(),[input.buffer]);return[4,appWorker.evtResponse.waitFor(function(response){return response.actionId===actionId})];case 1:output=_a.sent().output;return[2,output]}})})}cipherFactory.encryptOrDecrypt=encryptOrDecrypt})(cipherFactory=cipherFactoryPool.cipherFactory||(cipherFactoryPool.cipherFactory={}))})(cipherFactoryPool||(cipherFactoryPool={}));exports.plain=function(){var encryptorDecryptorFactory=function(workerThreadPoolId){return cipherFactoryPool({cipherName:"plain",components:"EncryptorDecryptor",params:[]},workerThreadPoolId)};return __assign({encryptorDecryptorFactory:encryptorDecryptorFactory},sync_plain)}();exports.aes=function(){var encryptorDecryptorFactory=function(key,workerThreadPoolId){return cipherFactoryPool({cipherName:"aes",components:"EncryptorDecryptor",params:[key]},workerThreadPoolId)};return __assign({encryptorDecryptorFactory:encryptorDecryptorFactory},sync_aes)}();exports.rsa=function(){var encryptorFactory=function(encryptKey,workerThreadPoolId){return cipherFactoryPool({cipherName:"rsa",components:"Encryptor",params:[encryptKey]},workerThreadPoolId)};var decryptorFactory=function(decryptKey,workerThreadPoolId){return cipherFactoryPool({cipherName:"rsa",components:"Decryptor",params:[decryptKey]},workerThreadPoolId)};function encryptorDecryptorFactory(encryptKey,decryptKey,workerThreadPoolId){return cipherFactoryPool({cipherName:"rsa",components:"EncryptorDecryptor",params:[encryptKey,decryptKey]},workerThreadPoolId)}var generateKeys=function(seed,keysLengthBytes,workerThreadId){return __awaiter(_this,void 0,void 0,function(){var wasWorkerThreadIdSpecified,actionId,appWorker,outputs;return __generator(this,function(_a){switch(_a.label){case 0:wasWorkerThreadIdSpecified=workerThreadId!==undefined;workerThreadId=workerThreadId!==undefined?workerThreadId:generateId("rsa generate keys");actionId=getCounter();appWorker=getWorkerThread(workerThreadId);appWorker.send(function(){var action={action:"GenerateRsaKeys",actionId:actionId,params:[seed,keysLengthBytes]};return action}());return[4,appWorker.evtResponse.waitFor(function(response){return response.actionId===actionId})];case 1:outputs=_a.sent().outputs;if(!wasWorkerThreadIdSpecified){terminateWorkerThreads(workerThreadId)}return[2,outputs]}})})};return __assign({encryptorFactory:encryptorFactory,decryptorFactory:decryptorFactory,encryptorDecryptorFactory:encryptorDecryptorFactory,generateKeys:generateKeys},sync_rsa)}();exports.scrypt=function(){var hash=function(text,salt,params,progress,workerThreadId){if(params===void 0){params={}}if(progress===void 0){progress=function(){}}return __awaiter(_this,void 0,void 0,function(){var actionId,wasWorkerThreadIdSpecified,appWorker,boundTo,digest;return __generator(this,function(_a){switch(_a.label){case 0:actionId=getCounter();wasWorkerThreadIdSpecified=workerThreadId!==undefined;workerThreadId=workerThreadId!==undefined?workerThreadId:generateId("scrypt"+actionId);appWorker=getWorkerThread(workerThreadId);appWorker.send(function(){var action={action:"ScryptHash",actionId:actionId,params:[text,salt,params]};return action}());boundTo={};appWorker.evtResponse.attach(function(response){return response.actionId===actionId&&"percent"in response},boundTo,function(_a){var percent=_a.percent;return progress(percent)});return[4,appWorker.evtResponse.waitFor(function(response){return response.actionId===actionId&&"digest"in response})];case 1:digest=_a.sent().digest;appWorker.evtResponse.detach(boundTo);if(!wasWorkerThreadIdSpecified){terminateWorkerThreads(workerThreadId)}return[2,digest]}})})};return __assign({hash:hash},sync_scrypt)}()}).call(this,require("buffer").Buffer)},{"../sync/environnement":7,"../sync/types":9,"./WorkerThread":1,buffer:13,path:15,"run-exclusive":17}],6:[function(require,module,exports){(function(Buffer){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var environnement=require("../environnement");var toBuffer_1=require("../toBuffer");var transfer;(function(transfer){var SerializableUint8Array;(function(SerializableUint8Array){function match(value){return value instanceof Object&&value.type==="Uint8Array"&&typeof value.data==="string"}SerializableUint8Array.match=match;function build(value){return{type:"Uint8Array",data:toBuffer_1.toBuffer(value).toString("binary")}}SerializableUint8Array.build=build;function restore(value){return Buffer.from(value.data,"binary")}SerializableUint8Array.restore=restore})(SerializableUint8Array||(SerializableUint8Array={}));function prepare(threadMessage){if(environnement.isBrowser()){throw new Error("only for node")}var message=function(){if(threadMessage instanceof Uint8Array){return SerializableUint8Array.build(threadMessage)}else if(threadMessage instanceof Array){return threadMessage.map(function(entry){return prepare(entry)})}else if(threadMessage instanceof Object){var out={};for(var key in threadMessage){out[key]=prepare(threadMessage[key])}return out}else{return threadMessage}}();return message}transfer.prepare=prepare;function restore(message){if(environnement.isBrowser()){throw new Error("only for node")}var threadMessage=function(){if(SerializableUint8Array.match(message)){return SerializableUint8Array.restore(message)}else if(message instanceof Array){return message.map(function(entry){return restore(entry)})}else if(message instanceof Object){var out={};for(var key in message){out[key]=restore(message[key])}return out}else{return message}}();return threadMessage}transfer.restore=restore})(transfer=exports.transfer||(exports.transfer={}))}).call(this,require("buffer").Buffer)},{"../environnement":7,"../toBuffer":8,buffer:13}],7:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});function isBrowser(){return typeof window!=="undefined"||typeof self!=="undefined"&&!!self.postMessage}exports.isBrowser=isBrowser},{}],8:[function(require,module,exports){(function(Buffer){"use strict";Object.defineProperty(exports,"__esModule",{value:true});function toBuffer(uint8Array){return Buffer.from(uint8Array.buffer,uint8Array.byteOffset,uint8Array.length)}exports.toBuffer=toBuffer}).call(this,require("buffer").Buffer)},{buffer:13}],9:[function(require,module,exports){(function(Buffer){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var toBuffer_1=require("./toBuffer");var RsaKey;(function(RsaKey){function stringify(rsaKey){return JSON.stringify([rsaKey.format,toBuffer_1.toBuffer(rsaKey.data).toString("binary")])}RsaKey.stringify=stringify;function parse(stringifiedRsaKey){var _a=JSON.parse(stringifiedRsaKey),format=_a[0],strData=_a[1];return{format:format,data:new Uint8Array(Buffer.from(strData,"binary"))}}RsaKey.parse=parse;function build(data,format){return{format:format,data:typeof data==="string"?Buffer.from(data,"binary"):data}}RsaKey.build=build;var Public;(function(Public){function build(data){return RsaKey.build(data,"pkcs1-public-der")}Public.build=build;function match(rsaKey){return rsaKey.format==="pkcs1-public-der"}Public.match=match})(Public=RsaKey.Public||(RsaKey.Public={}));var Private;(function(Private){function build(data){return RsaKey.build(data,"pkcs1-private-der")}Private.build=build;function match(rsaKey){return rsaKey.format==="pkcs1-private-der"}Private.match=match})(Private=RsaKey.Private||(RsaKey.Private={}))})(RsaKey=exports.RsaKey||(exports.RsaKey={}))}).call(this,require("buffer").Buffer)},{"./toBuffer":8,buffer:13}],10:[function(require,module,exports){"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value)}).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};var __generator=this&&this.__generator||function(thisArg,body){var _={label:0,sent:function(){if(t[0]&1)throw t[1];return t[1]},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),throw:verb(1),return:verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return step([n,v])}}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=1,y&&(t=op[0]&2?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break}if(t[2])_.ops.pop();_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e];y=0}finally{f=t=0}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true}}};var _this=this;Object.defineProperty(exports,"__esModule",{value:true});var ttTesting=require("transfer-tools/dist/lib/testing");var lib=require("../async");(function(){return __awaiter(_this,void 0,void 0,function(){var workerThreadPoolId,results,_loop_1,_i,_a,n,_b,t1,t2;var _this=this;return __generator(this,function(_c){switch(_c.label){case 0:workerThreadPoolId="aes pool";results={};_loop_1=function(n){var aesKey,encryptorDecryptor,tasks,stringifyThenEncrypt_1,decryptThenParse_1,text_1,i,start;return __generator(this,function(_a){switch(_a.label){case 0:lib.workerThreadPool.preSpawn(workerThreadPoolId,n);return[4,new Promise(function(resolve){return setTimeout(resolve,5e3)})];case 1:_a.sent();console.log("Started with a pool of "+n+" thread !");return[4,lib.aes.getTestKey()];case 2:aesKey=_a.sent();encryptorDecryptor=lib.aes.encryptorDecryptorFactory(aesKey,workerThreadPoolId);tasks=[];stringifyThenEncrypt_1=lib.serializer.stringifyThenEncryptFactory(encryptorDecryptor);decryptThenParse_1=lib.serializer.decryptThenParseFactory(encryptorDecryptor);text_1=ttTesting.genUtf8Str(1e3,undefined,""+0);for(i=1;i<1e3;i++){console.log(i);tasks[tasks.length]=function(){return __awaiter(_this,void 0,void 0,function(){var _a,_b;return __generator(this,function(_c){switch(_c.label){case 0:_a=text_1;_b=decryptThenParse_1;return[4,stringifyThenEncrypt_1(text_1)];case 1:return[4,_b.apply(void 0,[_c.sent()])];case 2:if(_a!==_c.sent()){throw new Error("failed with "+JSON.stringify(text_1))}return[2]}})})}()}start=Date.now();return[4,Promise.all(tasks)];case 3:_a.sent();results[n]=Date.now()-start;console.log("PASS in "+results[n]+"ms");return[2]}})};_i=0,_a=[5,1];_c.label=1;case 1:if(!(_i<_a.length))return[3,4];n=_a[_i];return[5,_loop_1(n)];case 2:_c.sent();_c.label=3;case 3:_i++;return[3,1];case 4:_b=Object.keys(results).map(function(n){return results[n]}),t1=_b[0],t2=_b[1];console.log("Ratio single/multi thread: "+(t1/t2).toFixed(2));lib.workerThreadPool.terminate(workerThreadPoolId);console.log("DONE");return[2]}})})})()},{"../async":5,"transfer-tools/dist/lib/testing":28}],11:[function(require,module,exports){"use strict";exports.byteLength=byteLength;exports.toByteArray=toByteArray;exports.fromByteArray=fromByteArray;var lookup=[];var revLookup=[];var Arr=typeof Uint8Array!=="undefined"?Uint8Array:Array;var code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var i=0,len=code.length;i<len;++i){lookup[i]=code[i];revLookup[code.charCodeAt(i)]=i}revLookup["-".charCodeAt(0)]=62;revLookup["_".charCodeAt(0)]=63;function getLens(b64){var len=b64.length;if(len%4>0){throw new Error("Invalid string. Length must be a multiple of 4")}var validLen=b64.indexOf("=");if(validLen===-1)validLen=len;var placeHoldersLen=validLen===len?0:4-validLen%4;return[validLen,placeHoldersLen]}function byteLength(b64){var lens=getLens(b64);var validLen=lens[0];var placeHoldersLen=lens[1];return(validLen+placeHoldersLen)*3/4-placeHoldersLen}function _byteLength(b64,validLen,placeHoldersLen){return(validLen+placeHoldersLen)*3/4-placeHoldersLen}function toByteArray(b64){var tmp;var lens=getLens(b64);var validLen=lens[0];var placeHoldersLen=lens[1];var arr=new Arr(_byteLength(b64,validLen,placeHoldersLen));var curByte=0;var len=placeHoldersLen>0?validLen-4:validLen;for(var i=0;i<len;i+=4){tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)];arr[curByte++]=tmp>>16&255;arr[curByte++]=tmp>>8&255;arr[curByte++]=tmp&255}if(placeHoldersLen===2){tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4;arr[curByte++]=tmp&255}if(placeHoldersLen===1){tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2;arr[curByte++]=tmp>>8&255;arr[curByte++]=tmp&255}return arr}function tripletToBase64(num){return lookup[num>>18&63]+lookup[num>>12&63]+lookup[num>>6&63]+lookup[num&63]}function encodeChunk(uint8,start,end){var tmp;var output=[];for(var i=start;i<end;i+=3){tmp=(uint8[i]<<16&16711680)+(uint8[i+1]<<8&65280)+(uint8[i+2]&255);output.push(tripletToBase64(tmp))}return output.join("")}function fromByteArray(uint8){var tmp;var len=uint8.length;var extraBytes=len%3;var parts=[];var maxChunkLength=16383;for(var i=0,len2=len-extraBytes;i<len2;i+=maxChunkLength){parts.push(encodeChunk(uint8,i,i+maxChunkLength>len2?len2:i+maxChunkLength))}if(extraBytes===1){tmp=uint8[len-1];parts.push(lookup[tmp>>2]+lookup[tmp<<4&63]+"==")}else if(extraBytes===2){tmp=(uint8[len-2]<<8)+uint8[len-1];parts.push(lookup[tmp>>10]+lookup[tmp>>4&63]+lookup[tmp<<2&63]+"=")}return parts.join("")}},{}],12:[function(require,module,exports){},{}],13:[function(require,module,exports){(function(Buffer){"use strict";var base64=require("base64-js");var ieee754=require("ieee754");exports.Buffer=Buffer;exports.SlowBuffer=SlowBuffer;exports.INSPECT_MAX_BYTES=50;var K_MAX_LENGTH=2147483647;exports.kMaxLength=K_MAX_LENGTH;Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport();if(!Buffer.TYPED_ARRAY_SUPPORT&&typeof console!=="undefined"&&typeof console.error==="function"){console.error("This browser lacks typed array (Uint8Array) support which is required by "+"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.")}function typedArraySupport(){try{var arr=new Uint8Array(1);arr.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}};return arr.foo()===42}catch(e){return false}}Object.defineProperty(Buffer.prototype,"parent",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.buffer}});Object.defineProperty(Buffer.prototype,"offset",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.byteOffset}});function createBuffer(length){if(length>K_MAX_LENGTH){throw new RangeError('The value "'+length+'" is invalid for option "size"')}var buf=new Uint8Array(length);buf.__proto__=Buffer.prototype;return buf}function Buffer(arg,encodingOrOffset,length){if(typeof arg==="number"){if(typeof encodingOrOffset==="string"){throw new TypeError('The "string" argument must be of type string. Received type number')}return allocUnsafe(arg)}return from(arg,encodingOrOffset,length)}if(typeof Symbol!=="undefined"&&Symbol.species!=null&&Buffer[Symbol.species]===Buffer){Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:true,enumerable:false,writable:false})}Buffer.poolSize=8192;function from(value,encodingOrOffset,length){if(typeof value==="string"){return fromString(value,encodingOrOffset)}if(ArrayBuffer.isView(value)){return fromArrayLike(value)}if(value==null){throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, "+"or Array-like Object. Received type "+typeof value)}if(isInstance(value,ArrayBuffer)||value&&isInstance(value.buffer,ArrayBuffer)){return fromArrayBuffer(value,encodingOrOffset,length)}if(typeof value==="number"){throw new TypeError('The "value" argument must not be of type number. Received type number')}var valueOf=value.valueOf&&value.valueOf();if(valueOf!=null&&valueOf!==value){return Buffer.from(valueOf,encodingOrOffset,length)}var b=fromObject(value);if(b)return b;if(typeof Symbol!=="undefined"&&Symbol.toPrimitive!=null&&typeof value[Symbol.toPrimitive]==="function"){return Buffer.from(value[Symbol.toPrimitive]("string"),encodingOrOffset,length)}throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, "+"or Array-like Object. Received type "+typeof value)}Buffer.from=function(value,encodingOrOffset,length){return from(value,encodingOrOffset,length)};Buffer.prototype.__proto__=Uint8Array.prototype;Buffer.__proto__=Uint8Array;function assertSize(size){if(typeof size!=="number"){throw new TypeError('"size" argument must be of type number')}else if(size<0){throw new RangeError('The value "'+size+'" is invalid for option "size"')}}function alloc(size,fill,encoding){assertSize(size);if(size<=0){return createBuffer(size)}if(fill!==undefined){return typeof encoding==="string"?createBuffer(size).fill(fill,encoding):createBuffer(size).fill(fill)}return createBuffer(size)}Buffer.alloc=function(size,fill,encoding){return alloc(size,fill,encoding)};function allocUnsafe(size){assertSize(size);return createBuffer(size<0?0:checked(size)|0)}Buffer.allocUnsafe=function(size){return allocUnsafe(size)};Buffer.allocUnsafeSlow=function(size){return allocUnsafe(size)};function fromString(string,encoding){if(typeof encoding!=="string"||encoding===""){encoding="utf8"}if(!Buffer.isEncoding(encoding)){throw new TypeError("Unknown encoding: "+encoding)}var length=byteLength(string,encoding)|0;var buf=createBuffer(length);var actual=buf.write(string,encoding);if(actual!==length){buf=buf.slice(0,actual)}return buf}function fromArrayLike(array){var length=array.length<0?0:checked(array.length)|0;var buf=createBuffer(length);for(var i=0;i<length;i+=1){buf[i]=array[i]&255}return buf}function fromArrayBuffer(array,byteOffset,length){if(byteOffset<0||array.byteLength<byteOffset){throw new RangeError('"offset" is outside of buffer bounds')}if(array.byteLength<byteOffset+(length||0)){throw new RangeError('"length" is outside of buffer bounds')}var buf;if(byteOffset===undefined&&length===undefined){buf=new Uint8Array(array)}else if(length===undefined){buf=new Uint8Array(array,byteOffset)}else{buf=new Uint8Array(array,byteOffset,length)}buf.__proto__=Buffer.prototype;return buf}function fromObject(obj){if(Buffer.isBuffer(obj)){var len=checked(obj.length)|0;var buf=createBuffer(len);if(buf.length===0){return buf}obj.copy(buf,0,0,len);return buf}if(obj.length!==undefined){if(typeof obj.length!=="number"||numberIsNaN(obj.length)){return createBuffer(0)}return fromArrayLike(obj)}if(obj.type==="Buffer"&&Array.isArray(obj.data)){return fromArrayLike(obj.data)}}function checked(length){if(length>=K_MAX_LENGTH){throw new RangeError("Attempt to allocate Buffer larger than maximum "+"size: 0x"+K_MAX_LENGTH.toString(16)+" bytes")}return length|0}function SlowBuffer(length){if(+length!=length){length=0}return Buffer.alloc(+length)}Buffer.isBuffer=function isBuffer(b){return b!=null&&b._isBuffer===true&&b!==Buffer.prototype};Buffer.compare=function compare(a,b){if(isInstance(a,Uint8Array))a=Buffer.from(a,a.offset,a.byteLength);if(isInstance(b,Uint8Array))b=Buffer.from(b,b.offset,b.byteLength);if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b)){throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array')}if(a===b)return 0;var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break}}if(x<y)return-1;if(y<x)return 1;return 0};Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return true;default:return false}};Buffer.concat=function concat(list,length){if(!Array.isArray(list)){throw new TypeError('"list" argument must be an Array of Buffers')}if(list.length===0){return Buffer.alloc(0)}var i;if(length===undefined){length=0;for(i=0;i<list.length;++i){length+=list[i].length}}var buffer=Buffer.allocUnsafe(length);var pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(isInstance(buf,Uint8Array)){buf=Buffer.from(buf)}if(!Buffer.isBuffer(buf)){throw new TypeError('"list" argument must be an Array of Buffers')}buf.copy(buffer,pos);pos+=buf.length}return buffer};function byteLength(string,encoding){if(Buffer.isBuffer(string)){return string.length}if(ArrayBuffer.isView(string)||isInstance(string,ArrayBuffer)){return string.byteLength}if(typeof string!=="string"){throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. '+"Received type "+typeof string)}var len=string.length;var mustMatch=arguments.length>2&&arguments[2]===true;if(!mustMatch&&len===0)return 0;var loweredCase=false;for(;;){switch(encoding){case"ascii":case"latin1":case"binary":return len;case"utf8":case"utf-8":return utf8ToBytes(string).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return len*2;case"hex":return len>>>1;case"base64":return base64ToBytes(string).length;default:if(loweredCase){return mustMatch?-1:utf8ToBytes(string).length}encoding=(""+encoding).toLowerCase();loweredCase=true}}}Buffer.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;if(start===undefined||start<0){start=0}if(start>this.length){return""}if(end===undefined||end>this.length){end=this.length}if(end<=0){return""}end>>>=0;start>>>=0;if(end<=start){return""}if(!encoding)encoding="utf8";while(true){switch(encoding){case"hex":return hexSlice(this,start,end);case"utf8":case"utf-8":return utf8Slice(this,start,end);case"ascii":return asciiSlice(this,start,end);case"latin1":case"binary":return latin1Slice(this,start,end);case"base64":return base64Slice(this,start,end);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(encoding+"").toLowerCase();loweredCase=true}}}Buffer.prototype._isBuffer=true;function swap(b,n,m){var i=b[n];b[n]=b[m];b[m]=i}Buffer.prototype.swap16=function swap16(){var len=this.length;if(len%2!==0){throw new RangeError("Buffer size must be a multiple of 16-bits")}for(var i=0;i<len;i+=2){swap(this,i,i+1)}return this};Buffer.prototype.swap32=function swap32(){var len=this.length;if(len%4!==0){throw new RangeError("Buffer size must be a multiple of 32-bits")}for(var i=0;i<len;i+=4){swap(this,i,i+3);swap(this,i+1,i+2)}return this};Buffer.prototype.swap64=function swap64(){var len=this.length;if(len%8!==0){throw new RangeError("Buffer size must be a multiple of 64-bits")}for(var i=0;i<len;i+=8){swap(this,i,i+7);swap(this,i+1,i+6);swap(this,i+2,i+5);swap(this,i+3,i+4)}return this};Buffer.prototype.toString=function toString(){var length=this.length;if(length===0)return"";if(arguments.length===0)return utf8Slice(this,0,length);return slowToString.apply(this,arguments)};Buffer.prototype.toLocaleString=Buffer.prototype.toString;Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError("Argument must be a Buffer");if(this===b)return true;return Buffer.compare(this,b)===0};Buffer.prototype.inspect=function inspect(){var str="";var max=exports.INSPECT_MAX_BYTES;str=this.toString("hex",0,max).replace(/(.{2})/g,"$1 ").trim();if(this.length>max)str+=" ... ";return"<Buffer "+str+">"};Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(isInstance(target,Uint8Array)){target=Buffer.from(target,target.offset,target.byteLength)}if(!Buffer.isBuffer(target)){throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. '+"Received type "+typeof target)}if(start===undefined){start=0}if(end===undefined){end=target?target.length:0}if(thisStart===undefined){thisStart=0}if(thisEnd===undefined){thisEnd=this.length}if(start<0||end>target.length||thisStart<0||thisEnd>this.length){throw new RangeError("out of range index")}if(thisStart>=thisEnd&&start>=end){return 0}if(thisStart>=thisEnd){return-1}if(start>=end){return 1}start>>>=0;end>>>=0;thisStart>>>=0;thisEnd>>>=0;if(this===target)return 0;var x=thisEnd-thisStart;var y=end-start;var len=Math.min(x,y);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i=0;i<len;++i){if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i];y=targetCopy[i];break}}if(x<y)return-1;if(y<x)return 1;return 0};function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){if(buffer.length===0)return-1;if(typeof byteOffset==="string"){encoding=byteOffset;byteOffset=0}else if(byteOffset>2147483647){byteOffset=2147483647}else if(byteOffset<-2147483648){byteOffset=-2147483648}byteOffset=+byteOffset;if(numberIsNaN(byteOffset)){byteOffset=dir?0:buffer.length-1}if(byteOffset<0)byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir)return-1;else byteOffset=buffer.length-1}else if(byteOffset<0){if(dir)byteOffset=0;else return-1}if(typeof val==="string"){val=Buffer.from(val,encoding)}if(Buffer.isBuffer(val)){if(val.length===0){return-1}return arrayIndexOf(buffer,val,byteOffset,encoding,dir)}else if(typeof val==="number"){val=val&255;if(typeof Uint8Array.prototype.indexOf==="function"){if(dir){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset)}else{return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset)}}return arrayIndexOf(buffer,[val],byteOffset,encoding,dir)}throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var indexSize=1;var arrLength=arr.length;var valLength=val.length;if(encoding!==undefined){encoding=String(encoding).toLowerCase();if(encoding==="ucs2"||encoding==="ucs-2"||encoding==="utf16le"||encoding==="utf-16le"){if(arr.length<2||val.length<2){return-1}indexSize=2;arrLength/=2;valLength/=2;byteOffset/=2}}function read(buf,i){if(indexSize===1){return buf[i]}else{return buf.readUInt16BE(i*indexSize)}}var i;if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++){if(read(arr,i)===read(val,foundIndex===-1?0:i-foundIndex)){if(foundIndex===-1)foundIndex=i;if(i-foundIndex+1===valLength)return foundIndex*indexSize}else{if(foundIndex!==-1)i-=i-foundIndex;foundIndex=-1}}}else{if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i=byteOffset;i>=0;i--){var found=true;for(var j=0;j<valLength;j++){if(read(arr,i+j)!==read(val,j)){found=false;break}}if(found)return i}}return-1}Buffer.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-1};Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,true)};Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,false)};function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining}else{length=Number(length);if(length>remaining){length=remaining}}var strLen=string.length;if(length>strLen/2){length=strLen/2}for(var i=0;i<length;++i){var parsed=parseInt(string.substr(i*2,2),16);if(numberIsNaN(parsed))return i;buf[offset+i]=parsed}return i}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length)}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length)}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length)}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length)}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length)}Buffer.prototype.write=function write(string,offset,length,encoding){if(offset===undefined){encoding="utf8";length=this.length;offset=0}else if(length===undefined&&typeof offset==="string"){encoding=offset;length=this.length;offset=0}else if(isFinite(offset)){offset=offset>>>0;if(isFinite(length)){length=length>>>0;if(encoding===undefined)encoding="utf8"}else{encoding=length;length=undefined}}else{throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported")}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError("Attempt to write outside buffer bounds")}if(!encoding)encoding="utf8";var loweredCase=false;for(;;){switch(encoding){case"hex":return hexWrite(this,string,offset,length);case"utf8":case"utf-8":return utf8Write(this,string,offset,length);case"ascii":return asciiWrite(this,string,offset,length);case"latin1":case"binary":return latin1Write(this,string,offset,length);case"base64":return base64Write(this,string,offset,length);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(""+encoding).toLowerCase();loweredCase=true}}};Buffer.prototype.toJSON=function toJSON(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function base64Slice(buf,start,end){if(start===0&&end===buf.length){return base64.fromByteArray(buf)}else{return base64.fromByteArray(buf.slice(start,end))}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>239?4:firstByte>223?3:firstByte>191?2:1;if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<128){codePoint=firstByte}break;case 2:secondByte=buf[i+1];if((secondByte&192)===128){tempCodePoint=(firstByte&31)<<6|secondByte&63;if(tempCodePoint>127){codePoint=tempCodePoint}}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if((secondByte&192)===128&&(thirdByte&192)===128){tempCodePoint=(firstByte&15)<<12|(secondByte&63)<<6|thirdByte&63;if(tempCodePoint>2047&&(tempCodePoint<55296||tempCodePoint>57343)){codePoint=tempCodePoint}}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if((secondByte&192)===128&&(thirdByte&192)===128&&(fourthByte&192)===128){tempCodePoint=(firstByte&15)<<18|(secondByte&63)<<12|(thirdByte&63)<<6|fourthByte&63;if(tempCodePoint>65535&&tempCodePoint<1114112){codePoint=tempCodePoint}}}}if(codePoint===null){codePoint=65533;bytesPerSequence=1}else if(codePoint>65535){codePoint-=65536;res.push(codePoint>>>10&1023|55296);codePoint=56320|codePoint&1023}res.push(codePoint);i+=bytesPerSequence}return decodeCodePointsArray(res)}var MAX_ARGUMENTS_LENGTH=4096;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints)}var res="";var i=0;while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH))}return res}function asciiSlice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]&127)}return ret}function latin1Slice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i])}return ret}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out="";for(var i=start;i<end;++i){out+=toHex(buf[i])}return out}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res="";for(var i=0;i<bytes.length;i+=2){res+=String.fromCharCode(bytes[i]+bytes[i+1]*256)}return res}Buffer.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<0){start+=len;if(start<0)start=0}else if(start>len){start=len}if(end<0){end+=len;if(end<0)end=0}else if(end>len){end=len}if(end<start)end=start;var newBuf=this.subarray(start,end);newBuf.__proto__=Buffer.prototype;return newBuf};function checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError("offset is not uint");if(offset+ext>length)throw new RangeError("Trying to access beyond buffer length")}Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=256)){val+=this[offset+i]*mul}return val};Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert){checkOffset(offset,byteLength,this.length)}var val=this[offset+--byteLength];var mul=1;while(byteLength>0&&(mul*=256)){val+=this[offset+--byteLength]*mul}return val};Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,1,this.length);return this[offset]};Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8};Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1]};Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*16777216};Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]*16777216+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3])};Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=256)){val+=this[offset+i]*mul}mul*=128;if(val>=mul)val-=Math.pow(2,8*byteLength);return val};Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert)checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=1;var val=this[offset+--i];while(i>0&&(mul*=256)){val+=this[offset+--i]*mul}mul*=128;if(val>=mul)val-=Math.pow(2,8*byteLength);return val};Buffer.prototype.readInt8=function readInt8(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,1,this.length);if(!(this[offset]&128))return this[offset];return(255-this[offset]+1)*-1};Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&32768?val|4294901760:val};Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&32768?val|4294901760:val};Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24};Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3]};Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,true,23,4)};Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,false,23,4)};Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,true,52,8)};Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,false,52,8)};function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError("Index out of range")}Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0)}var mul=1;var i=0;this[offset]=value&255;while(++i<byteLength&&(mul*=256)){this[offset+i]=value/mul&255}return offset+byteLength};Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;byteLength=byteLength>>>0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0)}var i=byteLength-1;var mul=1;this[offset+i]=value&255;while(--i>=0&&(mul*=256)){this[offset+i]=value/mul&255}return offset+byteLength};Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,1,255,0);this[offset]=value&255;return offset+1};Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,65535,0);this[offset]=value&255;this[offset+1]=value>>>8;return offset+2};Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,65535,0);this[offset]=value>>>8;this[offset+1]=value&255;return offset+2};Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,4294967295,0);this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&255;return offset+4};Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,4294967295,0);this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&255;return offset+4};Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit)}var i=0;var mul=1;var sub=0;this[offset]=value&255;while(++i<byteLength&&(mul*=256)){if(value<0&&sub===0&&this[offset+i-1]!==0){sub=1}this[offset+i]=(value/mul>>0)-sub&255}return offset+byteLength};Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit)}var i=byteLength-1;var mul=1;var sub=0;this[offset+i]=value&255;while(--i>=0&&(mul*=256)){if(value<0&&sub===0&&this[offset+i+1]!==0){sub=1}this[offset+i]=(value/mul>>0)-sub&255}return offset+byteLength};Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,1,127,-128);if(value<0)value=255+value+1;this[offset]=value&255;return offset+1};Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,32767,-32768);this[offset]=value&255;this[offset+1]=value>>>8;return offset+2};Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,32767,-32768);this[offset]=value>>>8;this[offset+1]=value&255;return offset+2};Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,2147483647,-2147483648);this[offset]=value&255;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24;return offset+4};Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,2147483647,-2147483648);if(value<0)value=4294967295+value+1;this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&255;return offset+4};function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError("Index out of range");if(offset<0)throw new RangeError("Index out of range")}function writeFloat(buf,value,offset,littleEndian,noAssert){value=+value;offset=offset>>>0;if(!noAssert){checkIEEE754(buf,value,offset,4,34028234663852886e22,-34028234663852886e22)}ieee754.write(buf,value,offset,littleEndian,23,4);return offset+4}Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert)};Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert)};function writeDouble(buf,value,offset,littleEndian,noAssert){value=+value;offset=offset>>>0;if(!noAssert){checkIEEE754(buf,value,offset,8,17976931348623157e292,-17976931348623157e292)}ieee754.write(buf,value,offset,littleEndian,52,8);return offset+8}Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert)};Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert)};Buffer.prototype.copy=function copy(target,targetStart,start,end){if(!Buffer.isBuffer(target))throw new TypeError("argument should be a Buffer");if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;if(end===start)return 0;if(target.length===0||this.length===0)return 0;if(targetStart<0){throw new RangeError("targetStart out of bounds")}if(start<0||start>=this.length)throw new RangeError("Index out of range");if(end<0)throw new RangeError("sourceEnd out of bounds");if(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start}var len=end-start;if(this===target&&typeof Uint8Array.prototype.copyWithin==="function"){this.copyWithin(targetStart,start,end)}else if(this===target&&start<targetStart&&targetStart<end){for(var i=len-1;i>=0;--i){target[i+targetStart]=this[i+start]}}else{Uint8Array.prototype.set.call(target,this.subarray(start,end),targetStart)}return len};Buffer.prototype.fill=function fill(val,start,end,encoding){if(typeof val==="string"){if(typeof start==="string"){encoding=start;start=0;end=this.length}else if(typeof end==="string"){encoding=end;end=this.length}if(encoding!==undefined&&typeof encoding!=="string"){throw new TypeError("encoding must be a string")}if(typeof encoding==="string"&&!Buffer.isEncoding(encoding)){throw new TypeError("Unknown encoding: "+encoding)}if(val.length===1){var code=val.charCodeAt(0);if(encoding==="utf8"&&code<128||encoding==="latin1"){val=code}}}else if(typeof val==="number"){val=val&255}if(start<0||this.length<start||this.length<end){throw new RangeError("Out of range index")}if(end<=start){return this}start=start>>>0;end=end===undefined?this.length:end>>>0;if(!val)val=0;var i;if(typeof val==="number"){for(i=start;i<end;++i){this[i]=val}}else{var bytes=Buffer.isBuffer(val)?val:Buffer.from(val,encoding);var len=bytes.length;if(len===0){throw new TypeError('The value "'+val+'" is invalid for argument "value"')}for(i=0;i<end-start;++i){this[i+start]=bytes[i%len]}}return this};var INVALID_BASE64_RE=/[^+/0-9A-Za-z-_]/g;function base64clean(str){str=str.split("=")[0];str=str.trim().replace(INVALID_BASE64_RE,"");if(str.length<2)return"";while(str.length%4!==0){str=str+"="}return str}function toHex(n){if(n<16)return"0"+n.toString(16);return n.toString(16)}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;i<length;++i){codePoint=string.charCodeAt(i);if(codePoint>55295&&codePoint<57344){if(!leadSurrogate){if(codePoint>56319){if((units-=3)>-1)bytes.push(239,191,189);continue}else if(i+1===length){if((units-=3)>-1)bytes.push(239,191,189);continue}leadSurrogate=codePoint;continue}if(codePoint<56320){if((units-=3)>-1)bytes.push(239,191,189);leadSurrogate=codePoint;continue}codePoint=(leadSurrogate-55296<<10|codePoint-56320)+65536}else if(leadSurrogate){if((units-=3)>-1)bytes.push(239,191,189)}leadSurrogate=null;if(codePoint<128){if((units-=1)<0)break;bytes.push(codePoint)}else if(codePoint<2048){if((units-=2)<0)break;bytes.push(codePoint>>6|192,codePoint&63|128)}else if(codePoint<65536){if((units-=3)<0)break;bytes.push(codePoint>>12|224,codePoint>>6&63|128,codePoint&63|128)}else if(codePoint<1114112){if((units-=4)<0)break;bytes.push(codePoint>>18|240,codePoint>>12&63|128,codePoint>>6&63|128,codePoint&63|128)}else{throw new Error("Invalid code point")}}return bytes}function asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;++i){byteArray.push(str.charCodeAt(i)&255)}return byteArray}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length;++i){if((units-=2)<0)break;c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi)}return byteArray}function base64ToBytes(str){return base64.toByteArray(base64clean(str))}function blitBuffer(src,dst,offset,length){for(var i=0;i<length;++i){if(i+offset>=dst.length||i>=src.length)break;dst[i+offset]=src[i]}return i}function isInstance(obj,type){return obj instanceof type||obj!=null&&obj.constructor!=null&&obj.constructor.name!=null&&obj.constructor.name===type.name}function numberIsNaN(obj){return obj!==obj}}).call(this,require("buffer").Buffer)},{"base64-js":11,buffer:13,ieee754:14}],14:[function(require,module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}if(e===0){e=1-eBias}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity}else{m=m+Math.pow(2,mLen);e=e-eBias}return(s?-1:1)*m*Math.pow(2,e-mLen)};exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2}if(e+eBias>=1){value+=rt/c}else{value+=rt*Math.pow(2,1-eBias)}if(value*c>=2){e++;c/=2}if(e+eBias>=eMax){m=0;e=eMax}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0}}for(;mLen>=8;buffer[offset+i]=m&255,i+=d,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=e&255,i+=d,e/=256,eLen-=8){}buffer[offset+i-d]|=s*128}},{}],15:[function(require,module,exports){(function(process){function normalizeArray(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up--;up){parts.unshift("..")}}return parts}exports.resolve=function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:process.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){continue}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=normalizeArray(filter(resolvedPath.split("/"),function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."};exports.normalize=function(path){var isAbsolute=exports.isAbsolute(path),trailingSlash=substr(path,-1)==="/";path=normalizeArray(filter(path.split("/"),function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path};exports.isAbsolute=function(path){return path.charAt(0)==="/"};exports.join=function(){var paths=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(paths,function(p,index){if(typeof p!=="string"){throw new TypeError("Arguments to path.join must be strings")}return p}).join("/"))};exports.relative=function(from,to){from=exports.resolve(from).substr(1);to=exports.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")};exports.sep="/";exports.delimiter=":";exports.dirname=function(path){if(typeof path!=="string")path=path+"";if(path.length===0)return".";var code=path.charCodeAt(0);var hasRoot=code===47;var end=-1;var matchedSlash=true;for(var i=path.length-1;i>=1;--i){code=path.charCodeAt(i);if(code===47){if(!matchedSlash){end=i;break}}else{matchedSlash=false}}if(end===-1)return hasRoot?"/":".";if(hasRoot&&end===1){return"/"}return path.slice(0,end)};function basename(path){if(typeof path!=="string")path=path+"";var start=0;var end=-1;var matchedSlash=true;var i;for(i=path.length-1;i>=0;--i){if(path.charCodeAt(i)===47){if(!matchedSlash){start=i+1;break}}else if(end===-1){matchedSlash=false;end=i+1}}if(end===-1)return"";return path.slice(start,end)}exports.basename=function(path,ext){var f=basename(path);if(ext&&f.substr(-1*ext.length)===ext){f=f.substr(0,f.length-ext.length)}return f};exports.extname=function(path){if(typeof path!=="string")path=path+"";var startDot=-1;var startPart=0;var end=-1;var matchedSlash=true;var preDotState=0;for(var i=path.length-1;i>=0;--i){var code=path.charCodeAt(i);if(code===47){if(!matchedSlash){startPart=i+1;break}continue}if(end===-1){matchedSlash=false;end=i+1}if(code===46){if(startDot===-1)startDot=i;else if(preDotState!==1)preDotState=1}else if(startDot!==-1){preDotState=-1}}if(startDot===-1||end===-1||preDotState===0||preDotState===1&&startDot===end-1&&startDot===startPart+1){return""}return path.slice(startDot,end)};function filter(xs,f){if(xs.filter)return xs.filter(f);var res=[];for(var i=0;i<xs.length;i++){if(f(xs[i],i,xs))res.push(xs[i])}return res}var substr="ab".substr(-1)==="b"?function(str,start,len){return str.substr(start,len)}:function(str,start,len){if(start<0)start=str.length+start;return str.substr(start,len)}}).call(this,require("_process"))},{_process:16}],16:[function(require,module,exports){var process=module.exports={};var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}(function(){try{if(typeof setTimeout==="function"){cachedSetTimeout=setTimeout}else{cachedSetTimeout=defaultSetTimout}}catch(e){cachedSetTimeout=defaultSetTimout}try{if(typeof clearTimeout==="function"){cachedClearTimeout=clearTimeout}else{cachedClearTimeout=defaultClearTimeout}}catch(e){cachedClearTimeout=defaultClearTimeout}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){return setTimeout(fun,0)}if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0)}try{return cachedSetTimeout(fun,0)}catch(e){try{return cachedSetTimeout.call(null,fun,0)}catch(e){return cachedSetTimeout.call(this,fun,0)}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){return clearTimeout(marker)}if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker)}try{return cachedClearTimeout(marker)}catch(e){try{return cachedClearTimeout.call(null,marker)}catch(e){return cachedClearTimeout.call(this,marker)}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue)}else{queueIndex=-1}if(queue.length){drainQueue()}}function drainQueue(){if(draining){return}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run()}}queueIndex=-1;len=queue.length}currentQueue=null;draining=false;runClearTimeout(timeout)}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i]}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue)}};function Item(fun,array){this.fun=fun;this.array=array}Item.prototype.run=function(){this.fun.apply(null,this.array)};process.title="browser";process.browser=true;process.env={};process.argv=[];process.version="";process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[]};process.binding=function(name){throw new Error("process.binding is not supported")};process.cwd=function(){return"/"};process.chdir=function(dir){throw new Error("process.chdir is not supported")};process.umask=function(){return 0}},{}],17:[function(require,module,exports){"use strict";var __read=this&&this.__read||function(o,n){var m=typeof Symbol==="function"&&o[Symbol.iterator];if(!m)return o;var i=m.call(o),r,ar=[],e;try{while((n===void 0||n-- >0)&&!(r=i.next()).done)ar.push(r.value)}catch(error){e={error:error}}finally{try{if(r&&!r.done&&(m=i["return"]))m.call(i)}finally{if(e)throw e.error}}return ar};var __spread=this&&this.__spread||function(){for(var ar=[],i=0;i<arguments.length;i++)ar=ar.concat(__read(arguments[i]));return ar};exports.__esModule=true;var ExecQueue=function(){function ExecQueue(){this.queuedCalls=[];this.isRunning=false;this.prComplete=Promise.resolve()}ExecQueue.prototype.cancelAllQueuedCalls=function(){var n;this.queuedCalls.splice(0,n=this.queuedCalls.length);return n};return ExecQueue}();var globalContext={};var clusters=new WeakMap;function getOrCreateExecQueue(context,groupRef){var execQueueByGroup=clusters.get(context);if(!execQueueByGroup){execQueueByGroup=new WeakMap;clusters.set(context,execQueueByGroup)}var execQueue=execQueueByGroup.get(groupRef);if(!execQueue){execQueue=new ExecQueue;execQueueByGroup.set(groupRef,execQueue)}return execQueue}function createGroupRef(){return new Array(0)}exports.createGroupRef=createGroupRef;function build(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}switch(inputs.length){case 1:return buildFnPromise(true,createGroupRef(),inputs[0]);case 2:return buildFnPromise(true,inputs[0],inputs[1])}}exports.build=build;function buildMethod(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}switch(inputs.length){case 1:return buildFnPromise(false,createGroupRef(),inputs[0]);case 2:return buildFnPromise(false,inputs[0],inputs[1])}}exports.buildMethod=buildMethod;function getQueuedCallCount(runExclusiveFunction,classInstanceObject){var execQueue=getExecQueueByFunctionAndContext(runExclusiveFunction,classInstanceObject);return execQueue?execQueue.queuedCalls.length:0}exports.getQueuedCallCount=getQueuedCallCount;function cancelAllQueuedCalls(runExclusiveFunction,classInstanceObject){var execQueue=getExecQueueByFunctionAndContext(runExclusiveFunction,classInstanceObject);return execQueue?execQueue.cancelAllQueuedCalls():0}exports.cancelAllQueuedCalls=cancelAllQueuedCalls;function isRunning(runExclusiveFunction,classInstanceObject){var execQueue=getExecQueueByFunctionAndContext(runExclusiveFunction,classInstanceObject);return execQueue?execQueue.isRunning:false}exports.isRunning=isRunning;function getPrComplete(runExclusiveFunction,classInstanceObject){var execQueue=getExecQueueByFunctionAndContext(runExclusiveFunction,classInstanceObject);return execQueue?execQueue.prComplete:Promise.resolve()}exports.getPrComplete=getPrComplete;var groupByRunExclusiveFunction=new WeakMap;function getExecQueueByFunctionAndContext(runExclusiveFunction,context){if(context===void 0){context=globalContext}var groupRef=groupByRunExclusiveFunction.get(runExclusiveFunction);if(!groupRef){throw Error("Not a run exclusiveFunction")}var execQueueByGroup=clusters.get(context);if(!execQueueByGroup){return undefined}return execQueueByGroup.get(groupRef)}function buildFnPromise(isGlobal,groupRef,fun){var execQueue;var runExclusiveFunction=function(){var _this=this;var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}if(!isGlobal){if(!(this instanceof Object)){throw new Error("Run exclusive, <this> should be an object")}execQueue=getOrCreateExecQueue(this,groupRef)}return new Promise(function(resolve,reject){var onPrCompleteResolve;execQueue.prComplete=new Promise(function(resolve){return onPrCompleteResolve=function(){return resolve()}});var onComplete=function(result){onPrCompleteResolve();execQueue.isRunning=false;if(execQueue.queuedCalls.length){execQueue.queuedCalls.shift()()}if("data"in result){resolve(result.data)}else{reject(result.reason)}};(function callee(){var _this=this;var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}if(execQueue.isRunning){execQueue.queuedCalls.push(function(){return callee.apply(_this,inputs)});return}execQueue.isRunning=true;try{fun.apply(this,inputs).then(function(data){return onComplete({data:data})})["catch"](function(reason){return onComplete({reason:reason})})}catch(error){onComplete({reason:error})}}).apply(_this,inputs)})};if(isGlobal){execQueue=getOrCreateExecQueue(globalContext,groupRef)}groupByRunExclusiveFunction.set(runExclusiveFunction,groupRef);return runExclusiveFunction}function buildCb(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}switch(inputs.length){case 1:return buildFnCallback(true,createGroupRef(),inputs[0]);case 2:return buildFnCallback(true,inputs[0],inputs[1])}}exports.buildCb=buildCb;function buildMethodCb(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}switch(inputs.length){case 1:return buildFnCallback(false,createGroupRef(),inputs[0]);case 2:return buildFnCallback(false,inputs[0],inputs[1])}}exports.buildMethodCb=buildMethodCb;function buildFnCallback(isGlobal,groupRef,fun){var execQueue;var runExclusiveFunction=function(){var _this=this;var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}if(!isGlobal){if(!(this instanceof Object)){throw new Error("Run exclusive, <this> should be an object")}execQueue=getOrCreateExecQueue(this,groupRef)}var callback=undefined;if(inputs.length&&typeof inputs[inputs.length-1]==="function"){callback=inputs.pop()}var onPrCompleteResolve;execQueue.prComplete=new Promise(function(resolve){return onPrCompleteResolve=function(){return resolve()}});var onComplete=function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}onPrCompleteResolve();execQueue.isRunning=false;if(execQueue.queuedCalls.length){execQueue.queuedCalls.shift()()}if(callback){callback.apply(_this,inputs)}};onComplete.hasCallback=!!callback;(function callee(){var _this=this;var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}if(execQueue.isRunning){execQueue.queuedCalls.push(function(){return callee.apply(_this,inputs)});return}execQueue.isRunning=true;try{fun.apply(this,__spread(inputs,[onComplete]))}catch(error){error.message+=" ( This exception should not have been thrown, miss use of run-exclusive buildCb )";throw error}}).apply(this,inputs)};if(isGlobal){execQueue=getOrCreateExecQueue(globalContext,groupRef)}groupByRunExclusiveFunction.set(runExclusiveFunction,groupRef);return runExclusiveFunction}},{}],18:[function(require,module,exports){var alea=require("./lib/alea");var xor128=require("./lib/xor128");var xorwow=require("./lib/xorwow");var xorshift7=require("./lib/xorshift7");var xor4096=require("./lib/xor4096");var tychei=require("./lib/tychei");var sr=require("./seedrandom");sr.alea=alea;sr.xor128=xor128;sr.xorwow=xorwow;sr.xorshift7=xorshift7;sr.xor4096=xor4096;sr.tychei=tychei;module.exports=sr},{"./lib/alea":19,"./lib/tychei":20,"./lib/xor128":21,"./lib/xor4096":22,"./lib/xorshift7":23,"./lib/xorwow":24,"./seedrandom":25}],19:[function(require,module,exports){(function(global,module,define){function Alea(seed){var me=this,mash=Mash();me.next=function(){var t=2091639*me.s0+me.c*2.3283064365386963e-10;me.s0=me.s1;me.s1=me.s2;return me.s2=t-(me.c=t|0)};me.c=1;me.s0=mash(" ");me.s1=mash(" ");me.s2=mash(" ");me.s0-=mash(seed);if(me.s0<0){me.s0+=1}me.s1-=mash(seed);if(me.s1<0){me.s1+=1}me.s2-=mash(seed);if(me.s2<0){me.s2+=1}mash=null}function copy(f,t){t.c=f.c;t.s0=f.s0;t.s1=f.s1;t.s2=f.s2;return t}function impl(seed,opts){var xg=new Alea(seed),state=opts&&opts.state,prng=xg.next;prng.int32=function(){return xg.next()*4294967296|0};prng.double=function(){return prng()+(prng()*2097152|0)*11102230246251565e-32};prng.quick=prng;if(state){if(typeof state=="object")copy(state,xg);prng.state=function(){return copy(xg,{})}}return prng}function Mash(){var n=4022871197;var mash=function(data){data=String(data);for(var i=0;i<data.length;i++){n+=data.charCodeAt(i);var h=.02519603282416938*n;n=h>>>0;h-=n;h*=n;n=h>>>0;h-=n;n+=h*4294967296}return(n>>>0)*2.3283064365386963e-10};return mash}if(module&&module.exports){module.exports=impl}else if(define&&define.amd){define(function(){return impl})}else{this.alea=impl}})(this,typeof module=="object"&&module,typeof define=="function"&&define)},{}],20:[function(require,module,exports){(function(global,module,define){function XorGen(seed){var me=this,strseed="";me.next=function(){var b=me.b,c=me.c,d=me.d,a=me.a;b=b<<25^b>>>7^c;c=c-d|0;d=d<<24^d>>>8^a;a=a-b|0;me.b=b=b<<20^b>>>12^c;me.c=c=c-d|0;me.d=d<<16^c>>>16^a;return me.a=a-b|0};me.a=0;me.b=0;me.c=2654435769|0;me.d=1367130551;if(seed===Math.floor(seed)){me.a=seed/4294967296|0;me.b=seed|0}else{strseed+=seed}for(var k=0;k<strseed.length+20;k++){me.b^=strseed.charCodeAt(k)|0;me.next()}}function copy(f,t){t.a=f.a;t.b=f.b;t.c=f.c;t.d=f.d;return t}function impl(seed,opts){var xg=new XorGen(seed),state=opts&&opts.state,prng=function(){return(xg.next()>>>0)/4294967296};prng.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/4294967296,result=(top+bot)/(1<<21)}while(result===0);return result};prng.int32=xg.next;prng.quick=prng;if(state){if(typeof state=="object")copy(state,xg);prng.state=function(){return copy(xg,{})}}return prng}if(module&&module.exports){module.exports=impl}else if(define&&define.amd){define(function(){return impl})}else{this.tychei=impl}})(this,typeof module=="object"&&module,typeof define=="function"&&define)},{}],21:[function(require,module,exports){(function(global,module,define){function XorGen(seed){var me=this,strseed="";me.x=0;me.y=0;me.z=0;me.w=0;me.next=function(){var t=me.x^me.x<<11;me.x=me.y;me.y=me.z;me.z=me.w;return me.w^=me.w>>>19^t^t>>>8};if(seed===(seed|0)){me.x=seed}else{strseed+=seed}for(var k=0;k<strseed.length+64;k++){me.x^=strseed.charCodeAt(k)|0;me.next()}}function copy(f,t){t.x=f.x;t.y=f.y;t.z=f.z;t.w=f.w;return t}function impl(seed,opts){var xg=new XorGen(seed),state=opts&&opts.state,prng=function(){return(xg.next()>>>0)/4294967296};prng.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/4294967296,result=(top+bot)/(1<<21)}while(result===0);return result};prng.int32=xg.next;prng.quick=prng;if(state){if(typeof state=="object")copy(state,xg);prng.state=function(){return copy(xg,{})}}return prng}if(module&&module.exports){module.exports=impl}else if(define&&define.amd){define(function(){return impl})}else{this.xor128=impl}})(this,typeof module=="object"&&module,typeof define=="function"&&define)},{}],22:[function(require,module,exports){(function(global,module,define){function XorGen(seed){var me=this;me.next=function(){var w=me.w,X=me.X,i=me.i,t,v;me.w=w=w+1640531527|0;v=X[i+34&127];t=X[i=i+1&127];v^=v<<13;t^=t<<17;v^=v>>>15;t^=t>>>12;v=X[i]=v^t;me.i=i;return v+(w^w>>>16)|0};function init(me,seed){var t,v,i,j,w,X=[],limit=128;if(seed===(seed|0)){v=seed;seed=null}else{seed=seed+"\0";v=0;limit=Math.max(limit,seed.length)}for(i=0,j=-32;j<limit;++j){if(seed)v^=seed.charCodeAt((j+32)%seed.length);if(j===0)w=v;v^=v<<10;v^=v>>>15;v^=v<<4;v^=v>>>13;if(j>=0){w=w+1640531527|0;t=X[j&127]^=v+w;i=0==t?i+1:0}}if(i>=128){X[(seed&&seed.length||0)&127]=-1}i=127;for(j=4*128;j>0;--j){v=X[i+34&127];t=X[i=i+1&127];v^=v<<13;t^=t<<17;v^=v>>>15;t^=t>>>12;X[i]=v^t}me.w=w;me.X=X;me.i=i}init(me,seed)}function copy(f,t){t.i=f.i;t.w=f.w;t.X=f.X.slice();return t}function impl(seed,opts){if(seed==null)seed=+new Date;var xg=new XorGen(seed),state=opts&&opts.state,prng=function(){return(xg.next()>>>0)/4294967296};prng.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/4294967296,result=(top+bot)/(1<<21)}while(result===0);return result};prng.int32=xg.next;prng.quick=prng;if(state){if(state.X)copy(state,xg);prng.state=function(){return copy(xg,{})}}return prng}if(module&&module.exports){module.exports=impl}else if(define&&define.amd){define(function(){return impl})}else{this.xor4096=impl}})(this,typeof module=="object"&&module,typeof define=="function"&&define)},{}],23:[function(require,module,exports){(function(global,module,define){function XorGen(seed){var me=this;me.next=function(){var X=me.x,i=me.i,t,v,w;t=X[i];t^=t>>>7;v=t^t<<24;t=X[i+1&7];v^=t^t>>>10;t=X[i+3&7];v^=t^t>>>3;t=X[i+4&7];v^=t^t<<7;t=X[i+7&7];t=t^t<<13;v^=t^t<<9;X[i]=v;me.i=i+1&7;return v};function init(me,seed){var j,w,X=[];if(seed===(seed|0)){w=X[0]=seed}else{seed=""+seed;for(j=0;j<seed.length;++j){X[j&7]=X[j&7]<<15^seed.charCodeAt(j)+X[j+1&7]<<13}}while(X.length<8)X.push(0);for(j=0;j<8&&X[j]===0;++j);if(j==8)w=X[7]=-1;else w=X[j];me.x=X;me.i=0;for(j=256;j>0;--j){me.next()}}init(me,seed)}function copy(f,t){t.x=f.x.slice();t.i=f.i;return t}function impl(seed,opts){if(seed==null)seed=+new Date;var xg=new XorGen(seed),state=opts&&opts.state,prng=function(){return(xg.next()>>>0)/4294967296};prng.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/4294967296,result=(top+bot)/(1<<21)}while(result===0);return result};prng.int32=xg.next;prng.quick=prng;if(state){if(state.x)copy(state,xg);prng.state=function(){return copy(xg,{})}}return prng}if(module&&module.exports){module.exports=impl}else if(define&&define.amd){define(function(){return impl})}else{this.xorshift7=impl}})(this,typeof module=="object"&&module,typeof define=="function"&&define)},{}],24:[function(require,module,exports){(function(global,module,define){function XorGen(seed){var me=this,strseed="";me.next=function(){var t=me.x^me.x>>>2;me.x=me.y;me.y=me.z;me.z=me.w;me.w=me.v;return(me.d=me.d+362437|0)+(me.v=me.v^me.v<<4^(t^t<<1))|0};me.x=0;me.y=0;me.z=0;me.w=0;me.v=0;if(seed===(seed|0)){me.x=seed}else{strseed+=seed}for(var k=0;k<strseed.length+64;k++){me.x^=strseed.charCodeAt(k)|0;if(k==strseed.length){me.d=me.x<<10^me.x>>>4}me.next()}}function copy(f,t){t.x=f.x;t.y=f.y;t.z=f.z;t.w=f.w;t.v=f.v;t.d=f.d;return t}function impl(seed,opts){var xg=new XorGen(seed),state=opts&&opts.state,prng=function(){return(xg.next()>>>0)/4294967296};prng.double=function(){do{var top=xg.next()>>>11,bot=(xg.next()>>>0)/4294967296,result=(top+bot)/(1<<21)}while(result===0);return result};prng.int32=xg.next;prng.quick=prng;if(state){if(typeof state=="object")copy(state,xg);prng.state=function(){return copy(xg,{})}}return prng}if(module&&module.exports){module.exports=impl}else if(define&&define.amd){define(function(){return impl})}else{this.xorwow=impl}})(this,typeof module=="object"&&module,typeof define=="function"&&define)},{}],25:[function(require,module,exports){(function(pool,math){var global=(0,eval)("this"),width=256,chunks=6,digits=52,rngname="random",startdenom=math.pow(width,chunks),significance=math.pow(2,digits),overflow=significance*2,mask=width-1,nodecrypto;function seedrandom(seed,options,callback){var key=[];options=options==true?{entropy:true}:options||{};var shortseed=mixkey(flatten(options.entropy?[seed,tostring(pool)]:seed==null?autoseed():seed,3),key);var arc4=new ARC4(key);var prng=function(){var n=arc4.g(chunks),d=startdenom,x=0;while(n<significance){n=(n+x)*width;d*=width;x=arc4.g(1)}while(n>=overflow){n/=2;d/=2;x>>>=1}return(n+x)/d};prng.int32=function(){return arc4.g(4)|0};prng.quick=function(){return arc4.g(4)/4294967296};prng.double=prng;mixkey(tostring(arc4.S),pool);return(options.pass||callback||function(prng,seed,is_math_call,state){if(state){if(state.S){copy(state,arc4)}prng.state=function(){return copy(arc4,{})}}if(is_math_call){math[rngname]=prng;return seed}else return prng})(prng,shortseed,"global"in options?options.global:this==math,options.state)}function ARC4(key){var t,keylen=key.length,me=this,i=0,j=me.i=me.j=0,s=me.S=[];if(!keylen){key=[keylen++]}while(i<width){s[i]=i++}for(i=0;i<width;i++){s[i]=s[j=mask&j+key[i%keylen]+(t=s[i])];s[j]=t}(me.g=function(count){var t,r=0,i=me.i,j=me.j,s=me.S;while(count--){t=s[i=mask&i+1];r=r*width+s[mask&(s[i]=s[j=mask&j+t])+(s[j]=t)]}me.i=i;me.j=j;return r})(width)}function copy(f,t){t.i=f.i;t.j=f.j;t.S=f.S.slice();return t}function flatten(obj,depth){var result=[],typ=typeof obj,prop;if(depth&&typ=="object"){for(prop in obj){try{result.push(flatten(obj[prop],depth-1))}catch(e){}}}return result.length?result:typ=="string"?obj:obj+"\0"}function mixkey(seed,key){var stringseed=seed+"",smear,j=0;while(j<stringseed.length){key[mask&j]=mask&(smear^=key[mask&j]*19)+stringseed.charCodeAt(j++)}return tostring(key)}function autoseed(){try{var out;if(nodecrypto&&(out=nodecrypto.randomBytes)){out=out(width)}else{out=new Uint8Array(width);(global.crypto||global.msCrypto).getRandomValues(out)}return tostring(out)}catch(e){var browser=global.navigator,plugins=browser&&browser.plugins;return[+new Date,global,plugins,global.screen,tostring(pool)]}}function tostring(a){return String.fromCharCode.apply(0,a)}mixkey(math.random(),pool);if(typeof module=="object"&&module.exports){module.exports=seedrandom;try{nodecrypto=require("crypto")}catch(ex){}}else if(typeof define=="function"&&define.amd){define(function(){return seedrandom})}else{math["seed"+rngname]=seedrandom}})([],Math)},{crypto:12}],26:[function(require,module,exports){"use strict";module.exports=Object.setPrototypeOf||({__proto__:[]}instanceof Array?setProtoOf:mixinProperties);function setProtoOf(obj,proto){obj.__proto__=proto;return obj}function mixinProperties(obj,proto){for(var prop in proto){if(!obj.hasOwnProperty(prop)){obj[prop]=proto[prop]}}return obj}},{}],27:[function(require,module,exports){(function(Buffer){"use strict";exports.__esModule=true;function safeBufferFromTo(str,fromEnc,toEnc){try{return Buffer.from(str,fromEnc).toString(toEnc)}catch(_a){return new Buffer(str,fromEnc).toString(toEnc)}}exports.safeBufferFromTo=safeBufferFromTo;function transcode(encoding,alphabetMap){if(alphabetMap===void 0){alphabetMap={}}var reverseAlphabetMap={};for(var char in alphabetMap){reverseAlphabetMap[alphabetMap[char]]=char}return{enc:function(str){return transcode.applyNewAlphabet(safeBufferFromTo(str,"utf8",encoding),alphabetMap)},dec:function(encStr){return safeBufferFromTo(transcode.applyNewAlphabet(encStr,reverseAlphabetMap),encoding,"utf8")}}}exports.transcode=transcode;(function(transcode){var regExpCache={};function applyNewAlphabet(str,alphabetMap){for(var char in alphabetMap){var regExp=regExpCache[char];if(!regExp){regExp=new RegExp("\\"+char,"g");regExpCache[char]=regExp}str=str.replace(regExp,alphabetMap[char])}return str}transcode.applyNewAlphabet=applyNewAlphabet})(transcode=exports.transcode||(exports.transcode={}));function textSplit(partMaxLength,text){var parts=[];var rest=text;while(rest){if(partMaxLength>=rest.length){parts.push(rest);rest=""}else{parts.push(rest.substring(0,partMaxLength));rest=rest.substring(partMaxLength,rest.length)}}return parts}exports.textSplit=textSplit}).call(this,require("buffer").Buffer)},{buffer:13}],28:[function(require,module,exports){"use strict";var __values=this&&this.__values||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=0;if(m)return m.call(o);return{next:function(){if(o&&i>=o.length)o=void 0;return{value:o&&o[i++],done:!o}}}};exports.__esModule=true;var stringTransform_1=require("./stringTransform");var seedrandom=require("seedrandom");function assertSame(o1,o2,errorMessage){if(errorMessage===void 0){errorMessage="assertSame error"}try{assertSame.perform(o1,o2)}catch(e){var error=new Error(errorMessage+" ("+e.message+")");error["o1"]=o1;error["o2"]=o2;throw error}}exports.assertSame=assertSame;(function(assertSame){assertSame.handleArrayAsSet=true;function perform(o1,o2){var e_1,_a,e_2,_b;if(o1 instanceof Date){if(!(o2 instanceof Date)){console.assert(false,"M0");return}console.assert(o1.getTime()===o2.getTime(),"Date mismatch")}else if(o1 instanceof Object){console.assert(o2 instanceof Object,"M1");if(assertSame.handleArrayAsSet&&o1 instanceof Array){if(!(o2 instanceof Array)){console.assert(false,"M2");return}console.assert(o1.length===o2.length,"M3");var o2Set=new Set(o2);try{for(var o1_1=__values(o1),o1_1_1=o1_1.next();!o1_1_1.done;o1_1_1=o1_1.next()){var val1=o1_1_1.value;var isFound=false;try{for(var o2Set_1=__values(o2Set),o2Set_1_1=o2Set_1.next();!o2Set_1_1.done;o2Set_1_1=o2Set_1.next()){var val2=o2Set_1_1.value;try{perform(val1,val2)}catch(_c){continue}isFound=true;o2Set["delete"](val2);break}}catch(e_2_1){e_2={error:e_2_1}}finally{try{if(o2Set_1_1&&!o2Set_1_1.done&&(_b=o2Set_1["return"]))_b.call(o2Set_1)}finally{if(e_2)throw e_2.error}}console.assert(isFound,"M4")}}catch(e_1_1){e_1={error:e_1_1}}finally{try{if(o1_1_1&&!o1_1_1.done&&(_a=o1_1["return"]))_a.call(o1_1)}finally{if(e_1)throw e_1.error}}}else{if(o1 instanceof Array){if(!(o2 instanceof Array)){console.assert(false,"M5");return}console.assert(o1.length===o2.length,"M6")}else{perform(Object.keys(o1).filter(function(key){return o1[key]!==undefined}),Object.keys(o2).filter(function(key){return o2[key]!==undefined}))}for(var key in o1){perform(o1[key],o2[key])}}}else{console.assert(o1===o2,o1+" !== "+o2)}}assertSame.perform=perform})(assertSame=exports.assertSame||(exports.assertSame={}));exports.genDigits=function(n){return new Array(n).fill("").map(function(){return""+~~(Math.random()*10)}).join("")};exports.genHexStr=function(n){return new Array(n).fill("").map(function(){return(~~(Math.random()*16)).toString(16)}).join("")};var seedRandom;(function(seedRandom){var random=Math.random;function plant(seed){Math.random=function(){var prev=undefined;return function random(){prev=seedrandom(prev===undefined?seed:prev.toFixed(12),{global:false}).quick();return prev}}()}seedRandom.plant=plant;function restore(){Math.random=random}seedRandom.restore=restore})(seedRandom=exports.seedRandom||(exports.seedRandom={}));function genUtf8Str(length,restrict,seed){var charGenerator;switch(restrict){case undefined:charGenerator=genUtf8Str.genUtf8Char;break;case"ONLY 1 BYTE CHAR":charGenerator=genUtf8Str.genUtf8Char1B;break;case"ONLY 4 BYTE CHAR":charGenerator=genUtf8Str.genUtf8Char4B;break}if(typeof seed==="string"){seedRandom.plant(seed)}var out=new Array(length).fill("").map(function(){return charGenerator()}).join("");seedRandom.restore();return out}exports.genUtf8Str=genUtf8Str;(function(genUtf8Str){function bitStrToHexStr(bin){var hexChars=[];var i=0;while(bin[i]!==undefined){var fourBits=""+bin[i]+bin[i+1]+bin[i+2]+bin[i+3];var hexChar=parseInt(fourBits,2).toString(16);hexChars.push(hexChar);i=i+4}return hexChars.join("")}function genBitStr(length){return new Array(length).fill("").map(function(){return""+~~(Math.random()*2)}).join("")}function hexStrToUtf8Str(hex){var str=stringTransform_1.safeBufferFromTo(hex,"hex","utf8");if(stringTransform_1.safeBufferFromTo(str,"utf8","hex")!==hex){throw new Error("Invalid UTF8 data")}return str}function genUtf8Char1B(){var bin="0"+genBitStr(7);var hex=bitStrToHexStr(bin);try{return hexStrToUtf8Str(hex)}catch(_a){return genUtf8Char1B()}}genUtf8Str.genUtf8Char1B=genUtf8Char1B;genUtf8Str.genUtf8Char2B=function(){var bin="110"+genBitStr(5)+"10"+genBitStr(6);var hex=bitStrToHexStr(bin);try{return hexStrToUtf8Str(hex)}catch(_a){return genUtf8Str.genUtf8Char2B()}};function genUtf8Char3B(rand){if(rand===undefined){rand=~~(Math.random()*8)}var bin;switch(rand){case 0:bin="11100000101"+genBitStr(5)+"10"+genBitStr(6);break;case 1:bin="1110000110"+genBitStr(6)+"10"+genBitStr(6);break;case 2:bin="1110001"+genBitStr(1)+"10"+genBitStr(6)+"10"+genBitStr(6);break;case 3:bin="111001"+genBitStr(2)+"10"+genBitStr(6)+"10"+genBitStr(6);break;case 4:bin="111010"+genBitStr(2)+"10"+genBitStr(6)+"10"+genBitStr(6);break;case 5:bin="1110110010"+genBitStr(6)+"10"+genBitStr(6);break;case 6:bin="11101101100"+genBitStr(5)+"10"+genBitStr(6);break;case 7:bin="1110111"+genBitStr(1)+"10"+genBitStr(6)+"10"+genBitStr(6);break}var hex=bitStrToHexStr(bin);try{return hexStrToUtf8Str(hex)}catch(_a){return genUtf8Char3B()}}genUtf8Str.genUtf8Char3B=genUtf8Char3B;function genUtf8Char4B(rand){if(rand===undefined){rand=~~(Math.random()*5)}var bin;switch(rand){case 0:bin="111100001001"+genBitStr(4)+"10"+genBitStr(6)+"10"+genBitStr(6);break;case 1:bin="11110000101"+genBitStr(5)+"10"+genBitStr(6)+"10"+genBitStr(6);break;case 2:bin="1111000110"+genBitStr(6)+"10"+genBitStr(6)+"10"+genBitStr(6);break;case 3:bin="1111001"+genBitStr(1)+"10"+genBitStr(6)+"10"+genBitStr(6)+"10"+genBitStr(6);break;case 4:bin="111101001000"+genBitStr(4)+"10"+genBitStr(6)+"10"+genBitStr(6);break}var hex=bitStrToHexStr(bin);try{return hexStrToUtf8Str(hex)}catch(_a){return genUtf8Char4B()}}genUtf8Str.genUtf8Char4B=genUtf8Char4B;function genUtf8Char(){var rand=~~(Math.random()*4);switch(rand){case 0:return genUtf8Char1B();case 1:return genUtf8Str.genUtf8Char2B();case 2:return genUtf8Char3B();case 3:return genUtf8Char4B()}}genUtf8Str.genUtf8Char=genUtf8Char})(genUtf8Str=exports.genUtf8Str||(exports.genUtf8Str={}))},{"./stringTransform":27,seedrandom:18}],29:[function(require,module,exports){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();exports.__esModule=true;var SyncEventBase_1=require("./SyncEventBase");var SyncEvent=function(_super){__extends(SyncEvent,_super);function SyncEvent(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.evtAttach=new SyncEventBase_1.SyncEventBase;return _this}SyncEvent.prototype.addHandler=function(attachParams,implicitAttachParams){var handler=_super.prototype.addHandler.call(this,attachParams,implicitAttachParams);this.evtAttach.post(handler);return handler};return SyncEvent}(SyncEventBase_1.SyncEventBase);exports.SyncEvent=SyncEvent;var VoidSyncEvent=function(_super){__extends(VoidSyncEvent,_super);function VoidSyncEvent(){return _super!==null&&_super.apply(this,arguments)||this}VoidSyncEvent.prototype.post=function(){return _super.prototype.post.call(this,undefined)};return VoidSyncEvent}(SyncEvent);exports.VoidSyncEvent=VoidSyncEvent},{"./SyncEventBase":30}],30:[function(require,module,exports){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();var __assign=this&&this.__assign||Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};exports.__esModule=true;var SyncEventBaseProtected_1=require("./SyncEventBaseProtected");function matchPostable(o){return o instanceof Object&&typeof o.post==="function"}function isCallable(o){if(typeof o!=="function")return false;var prototype=o["prototype"];if(!prototype)return true;var methods=Object.getOwnPropertyNames(prototype);if(methods.length!==1)return false;var name=o.name;if(!name)return true;if(name[0].toUpperCase()===name[0])return false;return true}var SyncEventBase=function(_super){__extends(SyncEventBase,_super);function SyncEventBase(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.defaultParams={matcher:function matchAll(){return true},boundTo:_this,timeout:undefined,callback:undefined};return _this}SyncEventBase.prototype.getDefaultParams=function(){return __assign({},this.defaultParams)};SyncEventBase.prototype.readParams=function(inputs){var out=this.getDefaultParams();var n=inputs.length;if(!n)return out;if(matchPostable(inputs[n-1])){out.boundTo=inputs[n-1];inputs[n-1]=inputs[n-1].post}if(n===4){var p1=inputs[0],p2=inputs[1],p3=inputs[2],p4=inputs[3];out.matcher=p1;out.boundTo=p2;out.timeout=p3;out.callback=p4}else if(n===3){var p1=inputs[0],p2=inputs[1],p3=inputs[2];if(typeof p2==="number"){out.timeout=p2;out.callback=p3;if(isCallable(p1)){out.matcher=p1}else{out.boundTo=p1}}else{out.matcher=p1;out.boundTo=p2;out.callback=p3}}else if(n===2){var p1=inputs[0],p2=inputs[1];if(typeof p1==="number"){out.timeout=p1;out.callback=p2}else{out.callback=p2;if(isCallable(p1)){out.matcher=p1}else{out.boundTo=p1}}}else if(n===1){var p=inputs[0];out.callback=p}return out};SyncEventBase.prototype.waitFor=function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}var params=this.getDefaultParams();var n=inputs.length;if(n===2){var p1=inputs[0],p2=inputs[1];params.matcher=p1;params.timeout=p2}else{var p=inputs[0];if(isCallable(p)){params.matcher=p}else{params.timeout=p}}return _super.prototype.__waitFor.call(this,params)};SyncEventBase.prototype.attach=function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}return this.__attach(this.readParams(inputs))};SyncEventBase.prototype.attachOnce=function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}return this.__attachOnce(this.readParams(inputs))};SyncEventBase.prototype.attachExtract=function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}return this.__attachExtract(this.readParams(inputs))};SyncEventBase.prototype.attachPrepend=function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}return this.__attachPrepend(this.readParams(inputs))};SyncEventBase.prototype.attachOncePrepend=function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}return this.__attachOncePrepend(this.readParams(inputs))};SyncEventBase.prototype.attachOnceExtract=function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}return this.__attachOnceExtract(this.readParams(inputs))};return SyncEventBase}(SyncEventBaseProtected_1.SyncEventBaseProtected);exports.SyncEventBase=SyncEventBase},{"./SyncEventBaseProtected":31}],31:[function(require,module,exports){"use strict";var __assign=this&&this.__assign||Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};exports.__esModule=true;var runExclusive=require("run-exclusive");var defs_1=require("./defs");var SyncEventBaseProtected=function(){function SyncEventBaseProtected(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}var _this=this;this.tick=0;this.postCount=0;this.traceId=null;this.handlers=[];this.handlerTriggers=new Map;this.postAsync=runExclusive.buildCb(function(data,postTick,releaseLock){var isHandled=false;for(var _i=0,_a=_this.handlers.slice();_i<_a.length;_i++){var handler=_a[_i];var async=handler.async,matcher=handler.matcher;if(!async||!matcher(data))continue;var handlerTrigger=_this.handlerTriggers.get(handler);if(!handlerTrigger)continue;if(handlerTrigger.handlerTick>postTick)continue;isHandled=true;handlerTrigger.trigger(data)}if(!isHandled){releaseLock()}else{var handlersDump_1=_this.handlers.slice();setTimeout(function(){for(var _i=0,_a=_this.handlers;_i<_a.length;_i++){var handler=_a[_i];var async=handler.async;if(!async)continue;if(handlersDump_1.indexOf(handler)>=0)continue;_this.handlerTriggers.get(handler).handlerTick=postTick}releaseLock()},0)}});if(!inputs.length)return;var eventEmitter=inputs[0],eventName=inputs[1];var formatter=inputs[2]||this.defaultFormatter;eventEmitter.on(eventName,function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}return _this.post(formatter.apply(null,inputs))})}SyncEventBaseProtected.prototype.defaultFormatter=function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}return inputs[0]};SyncEventBaseProtected.prototype.enableTrace=function(id,formatter,log){this.traceId=id;if(!!formatter){this.traceFormatter=formatter}else{this.traceFormatter=function(data){try{return JSON.stringify(data,null,2)}catch(_a){return""+data}}}if(!!log){this.log=log}else{this.log=function(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i]}return console.log.apply(console,inputs)}}};SyncEventBaseProtected.prototype.disableTrace=function(){this.traceId=null};SyncEventBaseProtected.prototype.addHandler=function(attachParams,implicitAttachParams){var _this=this;var handler=__assign({},attachParams,implicitAttachParams,{detach:null,promise:null});handler.promise=new Promise(function(resolve,reject){var timer=undefined;if(typeof handler.timeout==="number"){timer=setTimeout(function(){timer=undefined;handler.detach();reject(new defs_1.EvtError.Timeout(handler.timeout))},handler.timeout)}handler.detach=function(){var index=_this.handlers.indexOf(handler);if(index<0)return false;_this.handlers.splice(index,1);_this.handlerTriggers["delete"](handler);if(timer){clearTimeout(timer);reject(new defs_1.EvtError.Detached)}return true};var handlerTick=_this.tick++;var trigger=function(data){var callback=handler.callback,once=handler.once;if(timer){clearTimeout(timer);timer=undefined}if(once)handler.detach();if(callback)callback.call(handler.boundTo,data);resolve(data)};_this.handlerTriggers.set(handler,{handlerTick:handlerTick,trigger:trigger})});if(handler.prepend){var i=void 0;for(i=0;i<this.handlers.length;i++){if(this.handlers[i].extract)continue;else break}this.handlers.splice(i,0,handler)}else{this.handlers.push(handler)}return handler};SyncEventBaseProtected.prototype.trace=function(data){if(this.traceId===null){return}var message="("+this.traceId+") ";var isExtracted=!!this.handlers.find(function(_a){var extract=_a.extract,matcher=_a.matcher;return extract&&matcher(data)});if(isExtracted){message+="extracted "}else{var handlerCount=this.handlers.filter(function(_a){var extract=_a.extract,matcher=_a.matcher;return!extract&&matcher(data)}).length;message+=handlerCount+" handler"+(handlerCount>1?"s":"")+" => "}this.log(message+this.traceFormatter(data))};SyncEventBaseProtected.prototype.post=function(data){this.trace(data);this.postCount++;var postTick=this.tick++;var isExtracted=this.postSync(data);if(!isExtracted){this.postAsync(data,postTick)}return this.postCount};SyncEventBaseProtected.prototype.postSync=function(data){for(var _i=0,_a=this.handlers.slice();_i<_a.length;_i++){var handler=_a[_i];var async=handler.async,matcher=handler.matcher,extract=handler.extract;if(async||!matcher(data))continue;var handlerTrigger=this.handlerTriggers.get(handler);if(!handlerTrigger)continue;handlerTrigger.trigger(data);if(extract)return true}return false};SyncEventBaseProtected.prototype.__waitFor=function(attachParams){return this.addHandler(attachParams,{async:true,extract:false,once:true,prepend:false}).promise};SyncEventBaseProtected.prototype.__attach=function(attachParams){return this.addHandler(attachParams,{async:false,extract:false,once:false,prepend:false}).promise};SyncEventBaseProtected.prototype.__attachExtract=function(attachParams){return this.addHandler(attachParams,{async:false,extract:true,once:false,prepend:true}).promise};SyncEventBaseProtected.prototype.__attachPrepend=function(attachParams){return this.addHandler(attachParams,{async:false,extract:false,once:false,prepend:true}).promise};SyncEventBaseProtected.prototype.__attachOnce=function(attachParams){return this.addHandler(attachParams,{async:false,extract:false,once:true,prepend:false}).promise};SyncEventBaseProtected.prototype.__attachOncePrepend=function(attachParams){return this.addHandler(attachParams,{async:false,extract:false,once:true,prepend:true}).promise};SyncEventBaseProtected.prototype.__attachOnceExtract=function(attachParams){return this.addHandler(attachParams,{async:false,extract:true,once:true,prepend:true}).promise};SyncEventBaseProtected.prototype.getHandlers=function(){return this.handlers.slice()};SyncEventBaseProtected.prototype.detach=function(boundTo){var detachedHandlers=[];for(var _i=0,_a=this.handlers.slice();_i<_a.length;_i++){var handler=_a[_i];if(boundTo===undefined||handler.boundTo===boundTo){handler.detach();detachedHandlers.push(handler)}}return detachedHandlers};return SyncEventBaseProtected}();exports.SyncEventBaseProtected=SyncEventBaseProtected},{"./defs":32,"run-exclusive":17}],32:[function(require,module,exports){"use strict";var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();exports.__esModule=true;var setPrototypeOf=require("setprototypeof");var EvtError;(function(EvtError){var Timeout=function(_super){__extends(Timeout,_super);function Timeout(timeout){var _newTarget=this.constructor;var _this=_super.call(this,"Evt timeout after "+timeout+"ms")||this;_this.timeout=timeout;setPrototypeOf(_this,_newTarget.prototype);return _this}return Timeout}(Error);EvtError.Timeout=Timeout;var Detached=function(_super){__extends(Detached,_super);function Detached(){var _newTarget=this.constructor;var _this=_super.call(this,"Evt handler detached")||this;setPrototypeOf(_this,_newTarget.prototype);return _this}return Detached}(Error);EvtError.Detached=Detached})(EvtError=exports.EvtError||(exports.EvtError={}))},{setprototypeof:26}],33:[function(require,module,exports){"use strict";exports.__esModule=true;var SyncEvent_1=require("./SyncEvent");exports.SyncEvent=SyncEvent_1.SyncEvent;exports.VoidSyncEvent=SyncEvent_1.VoidSyncEvent;var defs_1=require("./defs");exports.EvtError=defs_1.EvtError},{"./SyncEvent":29,"./defs":32}]},{},[10]);